Magesh Kuppan

Methodology:
    No powerpoint
    100% handson driven

Schedule:
    4 Session of 1:30 Hrs duration
    20 mins tea break between 1st & 2nd and 3rd & 4th sessions
    1 hr lunch break between 2nd & 3rd session

Recordings:
    https://forms.gle/gTJwnshuJWAk3u6z9

About You:
    Name
    Job Role
    Primary Skillset
    Experience in JavaScript
    Any interesting shows you watched OR books you read recently (optional)



JavaScript (ES5)

    Data Types
        string
        number
        boolean
        undefined

        other types
            Object
            Function
            null

    Programming Constructs
        var, if else, switch case, try catch finally, for, for in, while, throw

    APIs
        Array, Object, Error, Date, Math, timers (setTimeout, clearTimeout, setInterval, clearInterval), RegEx

    Special Features

    Line Oriented Languages
    Procedural Languages
    Object Based Languages
    Object Oriented Languages
    Functional Languages

    Functional Language & Object Based Language

    Functional Language
        Functions as data (object)

        Creation
            var fn = function(){}
            var fn = new Function()

            var add = new Function("x", "y", "return x + y;")

        Functions can have attributes
            var fn = function(){}
            fn.id = 100

        Functions can have methods
            fn.whoAmI = function(){
                console.log('I am a function');
            }


        Higher Order Functions
            Functions can be passed as arguments to other Functions

                function fn(x){
                    console.log('typeof x is ', typeof x);
                }
                var f = function(){}
                fn(f)

            Function can be returned as a return value

                function getAdder(){
                    return function(x,y){
                        return x + y;
                    }
                }
                var add = getAdder()
                add(100,200)
                getAdder()(100,200)

    Loosely typed
        function add(x,y){
            return x + y
        }

        add(10,20)                                                      //=> 30
        add(10,"20")                                                    //=> 30
        add(10,"abc")                                                   //=> 10
        add([10,20],[30,40])                                            //=> 100
        add([10,20],[30,"40"])                                          //=> 100
        add([10,20],[30,"abc"])                                         //=> 60
        add([10,20],[30,[40,"abc"]])                                    //=> 100
        add(function(){return 10;}, function(){ return 20;})            //=> 30
        add(function(){return [10,20];}, function(){ return [30,40];})  //=> 100
        add(10)                                                         //=> 10
        add()                                                           //=> 0
        add([function(){return [10,20];}, function(){ return [30,40];}]) //=> 100



$(domNode)
$([domNode1, domNode1])
$('#logo-events')
$(fn)
$($)

Abstract Equality Comparison Algorithm  (comparison using '==')
    https://262.ecma-international.org/5.1/#sec-11.9.3



Implicit values available in a function
    this
    arguments
        - Array LIKE object with all the argument values passed to the function
            arguments[0]
            arguments[1]
            arguments[2]
            arguments.length => # of arguments

'this' in JavaScript
    It DOESNOT matter where a function is OR who owns a function
    What matters is HOW the function is invoked

    this -> invocation context

    Function Invocation Patterns
        1. As a method of an object (obj)
                this -> obj

        2. As a function
                this -> global scope (window object in the browser)

        3. Using the 'call' method of the function
                fn.call(thisCtx, arg1, arg2, arg3....)

        4. Using the 'apply' method of the function
                fn.apply(thisCtx, [arg1, arg2, arg3...])

        5. As an "Immediately Invoked Function Expression"

        6. Using the 'new' keyword
                this -> new object
                this -> returned by default

Secrets of JavaScript Ninja
    - John Resig


Pure Functions
    - Functions with NO side effects

    - Can replace the invocation of the function with the result of the function invocation without affecting the final outcome